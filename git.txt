git config --global user.name "Your Name"
git config --global user.email "email@example.com"

config 配置有system级别 global（用户级别） 和local（当前仓库）三个 设置先从system-》global-》local  底层配置会覆盖顶层配置 分别使用--system/global/local 可以定位到配置文件
git config --system --list
git config --global  --list
git config --local  --list

mkdir name(文件夹) 创建文件夹
rmdir name(文件夹) 删除文件夹
cd name(文件夹)
pwd 查看显示当前目录
git init

git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。

git add <file>
git commit (-m 描述 没写会跳转界面  可以按i(insert) 补充描述 然后esc :wq)

git status 仓库当前的状态
git diff 工作区和暂存区的比较
git diff --cached 暂存区和分支的比较
git diff HEAD -- name 工作区和版本库里面最新版本的区别
git reset --hard HEAD^  上一个版本HEAD^，上上一个版本HEAD^^，HEAD~100。
git reset --hard (commit 记录id)
git reset HEAD name	把暂存区的修改撤销掉（unstage），重新放回工作区

git log		查看提交历史，以便确定要回退到哪个版本
git reflog	查看命令历史，以便确定要回到未来的哪个版本

git log --pretty=oneline 单行查看

//单词补充
modified 修改的 改良的
Untracked 无足迹的 无路径的
stash 储藏
pop 取出
abbrev 缩写
pretty 漂亮的 可爱的 优美的
no tracking information 没有跟踪信息
upstream 上行 上游

工作区 >git add >暂存区(版本库) git commit>分支(版本库)

git rm name 删除文件 需要提交

远程

在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：

$ ssh-keygen -t rsa -C "youremail@example.com"
git remote add origin git@github.com:caihuatong120/ProjectNumber1.git
git push -u origin master 
git push 把当前分支master推送到远程
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

克隆远程工程
git clone git@github.com:caihuatong120/JinjinProject.git

创建与合并分支
git checkout -b name git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

git branch dev
git checkout dev

git branch 查看当前分支

git merge name(分支) 从分支合并到当前分支

git branch -D name 直接删除
git branch -d name 没有融合不能删除

git log --graph (看到分支合并图) --pretty=oneline(单行) --abbrev-commit(缩写提交)

git merge --no-ff -m "merge wwith no-ff" dev 参数合并  准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward

bug 分支
git stash
git stash apply(恢复后 需要用git stash drop 来删除)
git stash pop (恢复 同时把stash内容也删除了)
git stash list (看stash列表)

多人协作
git remote查看远程库
git remote -v 显示更详细的信息   (fetch)抓取 (push) 推送 权限

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream branch-name origin/branch-name。
git push origin branch-name 本地推送分支
git checkout -b branch-name origin/branch-name 在本地创建和远程分支对应的分支

标签
git tag 查看所有标签
git show (tagname) 查看标签信息
git tag name 默认打在最新提交的commit上
git tag name commit id //例如git tag v0.9 6224937(某个对应的commit id)
git tag -a v0.1 -m "version 0.1 released" 3628164//用-a指定标签名，-m指定说明文字
git tag -s v0.2 -m "signed version 0.2 released" fec145a -s用私钥签名一个标签

git tag -d <tagname>可以删除一个本地标签
git push origin <tagname>可以推送一个本地标签
git push origin --tags可以推送全部未推送过的本地标签
git push origin :refs/tags/<tagname>可以删除一个远程标签

GitHub 
在GitHub上，可以任意Fork开源仓库；
自己拥有Fork后的仓库的读写权限；
可以推送pull request给官方仓库来贡献代码。

git remote rm origin(远程库) 删除远程库
